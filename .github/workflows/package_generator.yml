name: PackageGenerator

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v1

    - name: Select the osquery-toolchain URL and version
      id: osquery_toolchain_settings
      run: |
        echo ::set-output name=BASE_URL::https://alessandrogar.io/downloads
        echo ::set-output name=VERSION::1.0.1

    - name: Select the CMake version
      id: cmake_version
      run: echo ::set-output name=VALUE::3.16.1

    - name: Create the build folders
      run: mkdir -p build install downloads package

    - name: Synchronize the submodules
      run: git submodule sync --recursive

    - name: Update the submodules
      run: git submodule update --init --recursive

    - name: Install the osquery-toolchain
      id: osquery_toolchain_installer
      run: |
        if [ ! -f downloads/osquery-toolchain.tar.xz ] ; then
          curl -L "${{ steps.osquery_toolchain_settings.outputs.BASE_URL }}/osquery-toolchain-${{ steps.osquery_toolchain_settings.outputs.VERSION }}.tar.xz" -o downloads/osquery-toolchain.tar.xz
        fi

        tar xf downloads/osquery-toolchain.tar.xz
        echo ::set-output name=PATH::$(realpath osquery-toolchain)

    - name: Install system dependencies
      run: sudo apt-get install ninja-build -y

    - name: Install CMake
      id: cmake_installer
      run: |
        if [ ! -f downloads/cmake.tar.gz ] ; then
          curl -L "https://github.com/Kitware/CMake/releases/download/v${{ steps.cmake_version.outputs.VALUE }}/cmake-${{ steps.cmake_version.outputs.VALUE }}-Linux-x86_64.tar.gz" -o downloads/cmake.tar.gz
        fi

        tar xzf downloads/cmake.tar.gz
        echo ::set-output name=CMAKE_BINARY::$(realpath $(find cmake* -type d -name bin)/cmake)

    - name: Configure the project (Debug)
      run: ( cd build && ${{ steps.cmake_installer.outputs.CMAKE_BINARY }} -G Ninja -DEBPF_COMMON_TOOLCHAIN_PATH:PATH=${{ steps.osquery_toolchain_installer.outputs.PATH }} -DCMAKE_BUILD_TYPE:STRING=Debug -DEBPFPUB_ENABLE_TOOLS:BOOL=true -DEBPF_COMMON_ENABLE_TESTS:BOOL=true -DEBPF_COMMON_ENABLE_SANITIZERS:BOOL=true .. )

    - name: Build the project (Debug)
      run: ( cd build && ninja -v )

    - name: Run the tests (Debug)
      run: ( cd build && ninja -v run-ebpf-common-tests )

    - name: Clean up the build folder
      run: rm -rf build && mkdir build

    - name: Configure the project (Release)
      run: ( cd build && ${{ steps.cmake_installer.outputs.CMAKE_BINARY }} -G Ninja -DEBPF_COMMON_TOOLCHAIN_PATH:PATH=${{ steps.osquery_toolchain_installer.outputs.PATH }} -DCMAKE_BUILD_TYPE:STRING=Release -DEBPFPUB_ENABLE_TOOLS:BOOL=true -DEBPF_COMMON_ENABLE_TESTS:BOOL=true -DEBPF_COMMON_ENABLE_SANITIZERS:BOOL=false .. )

    - name: Build the project (Release)
      run: ( cd build && ninja -v )

    - name: Run the tests (Release)
      run: ( cd build && ninja -v run-ebpf-common-tests )

    - name: Install the project (Release)
      run: |
        export DESTDIR="$(realpath install)" &&
        ( cd build && ninja -v install )

    - name: Configure the packaging project
      run: |
        export EBPFPUB_INSTALL_PATH="$(realpath install)" &&
        ( cd package && ${{ steps.cmake_installer.outputs.CMAKE_BINARY }} -G Ninja -DEBPFPUB_INSTALL_PATH:PATH="${EBPFPUB_INSTALL_PATH}" ../package_generator )

    - name: Build the package
      run: ( cd package && ninja -v package )


    - name: Locate the packages
      id: package_locations
      run: |
        echo ::set-output name=DEB_PACKAGE_PATH::$(ls package/*.deb)
        echo ::set-output name=DEB_ASSET_NAME::$(cd package && ls *.deb)

        echo ::set-output name=RPM_PACKAGE_PATH::$(ls package/*.rpm)
        echo ::set-output name=RPM_ASSET_NAME::$(cd package && ls *.rpm)

        echo ::set-output name=TARGZ_PACKAGE_PATH::$(ls package/*.tar.gz)
        echo ::set-output name=TARGZ_ASSET_NAME::$(cd package && ls *.tar.gz)

    - name: Draft the new release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Version ${{ github.ref }}
        draft: true
        prerelease: false

    - name: Upload .deb package
      id: upload_deb_package
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.package_locations.outputs.DEB_PACKAGE_PATH }}
        asset_name: ${{ steps.package_locations.outputs.DEB_ASSET_NAME }}
        asset_content_type: application/vnd.debian.binary-package

    - name: Upload .rpm package
      id: upload_rpm_package
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.package_locations.outputs.RPM_PACKAGE_PATH }}
        asset_name: ${{ steps.package_locations.outputs.RPM_ASSET_NAME }}
        asset_content_type: application/x-rpm

    - name: Upload .tar.gz package
      id: upload_targz_package
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.package_locations.outputs.TARGZ_PACKAGE_PATH }}
        asset_name: ${{ steps.package_locations.outputs.TARGZ_ASSET_NAME }}
        asset_content_type: application/gzip
