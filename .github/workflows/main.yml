name: Linux

on:
  push:
    branches:
      - '*'

  pull_request:
    branches:
      - '*'

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-18.04]
        build_type: [RelWithDebInfo, Debug]

    steps:
    - uses: actions/checkout@v1

    - name: Select the osquery-toolchain URL and version
      id: osquery_toolchain_settings
      run: |
        echo ::set-output name=BASE_URL::https://alessandrogar.io/downloads
        echo ::set-output name=VERSION::1.0.1

    - name: Select the CMake version
      id: cmake_version
      run: echo ::set-output name=VALUE::3.16.1

    - name: Generate cache key
      id: cache_key
      run: echo ::set-output name=VALUE::build_${{ matrix.os }}_type-${{ matrix.build_type }}_osquery-toolchain-${{ steps.osquery_toolchain_settings.outputs.VERSION }}_cmake-${{ steps.cmake_version.outputs.VALUE }}

    - name: Update the cache (ccache)
      uses: actions/cache@v1.0.3
      with:
        path: ccache
        key: ${{ steps.cache_key.outputs.VALUE }}_ccache

    - name: Update the cache (Downloads)
      uses: actions/cache@v1.0.3
      with:
        path: downloads
        key: ${{ steps.cache_key.outputs.VALUE }}_downloads

    - name: Update the cache (git submodules)
      uses: actions/cache@v1.0.3
      with:
        path: .git/modules
        key: ${{ steps.cache_key.outputs.VALUE }}_gitsubmodules

    - name: Create the build folders
      run: mkdir -p ccache build install downloads package

    - name: Synchronize the submodules
      run: git submodule sync --recursive

    - name: Update the submodules
      run: git submodule update --init --recursive

    - name: Install the osquery-toolchain
      id: osquery_toolchain_installer
      run: |
        if [ ! -f downloads/osquery-toolchain.tar.xz ] ; then
          curl -L "${{ steps.osquery_toolchain_settings.outputs.BASE_URL }}/osquery-toolchain-${{ steps.osquery_toolchain_settings.outputs.VERSION }}.tar.xz" -o downloads/osquery-toolchain.tar.xz
        fi

        tar xf downloads/osquery-toolchain.tar.xz
        echo ::set-output name=PATH::$(realpath osquery-toolchain)

    - name: Install system dependencies
      run: sudo apt-get install ccache ninja-build -y

    - name: Install CMake
      id: cmake_installer
      run: |
        if [ ! -f downloads/cmake.tar.gz ] ; then
          curl -L "https://github.com/Kitware/CMake/releases/download/v${{ steps.cmake_version.outputs.VALUE }}/cmake-${{ steps.cmake_version.outputs.VALUE }}-Linux-x86_64.tar.gz" -o downloads/cmake.tar.gz
        fi

        tar xzf downloads/cmake.tar.gz
        echo ::set-output name=CMAKE_BINARY::$(realpath $(find cmake* -type d -name bin)/cmake)

    - name: Configure the project
      run: |
        export CCACHE_DIR="$(realpath ccache)"
        ( cd build && ${{ steps.cmake_installer.outputs.CMAKE_BINARY }} -G Ninja -DEBPFPUB_TOOLCHAIN_PATH:PATH=${{ steps.osquery_toolchain_installer.outputs.PATH }} -DCMAKE_BUILD_TYPE:STRING=${{ matrix.build_type }} -DEBPFPUB_ENABLE_INSTALL:BOOL=true -DEBPFPUB_ENABLE_TOOLS:BOOL=true -DEBPFPUB_ENABLE_TESTS:BOOL=true -DEBPFPUB_ENABLE_SANITIZERS:BOOL=true .. )

    - name: Build the project
      run: |
        export CCACHE_DIR="$(realpath ccache)"
        ( cd build && ninja -v )

    - name: Run the tests
      run: ( cd build && ninja -v run_ebpfpub_tests )

    - name: Install the project
      run: |
        export DESTDIR="$(realpath install)" &&
        ( cd build && ninja -v install )

    - name: Configure the packaging project
      run: |
        export EBPFPUB_INSTALL_PATH="$(realpath install)" &&
        ( cd package && ${{ steps.cmake_installer.outputs.CMAKE_BINARY }} -G Ninja -DEBPFPUB_INSTALL_PATH:PATH="${EBPFPUB_INSTALL_PATH}" ../package_generator )

    - name: Build the package
      run: ( cd package && ninja -v package )
